@page "/document/create"
@attribute [Authorize];
@rendermode InteractiveServer

<PageTitle>Добавление договора</PageTitle>

<EditForm Model="documentNew" OnValidSubmit="SaveAddModal">
    <DataAnnotationsValidator />
    <h2>Добавление договора</h2>
    <div class="mb-3">
        <label class="form-label">Номер договора</label>
        <InputText class="form-control" @bind-Value="documentNew.Index" />
        <ValidationMessage For="@(() => documentNew.Index)" />
    </div>
    <div class="mb-3">
        <label class="form-label">Содержание договора</label>
        <InputTextArea class="form-control" @bind-Value="documentNew.Content" />
        <ValidationMessage For="@(() => documentNew.Content)" />
    </div>
    <AuthorizeView Roles="Admin" Context="AdminContext">
        <div class="mb-3">
            <label class="form-label">Ответственный</label>
            <InputSelect class="form-control" @bind-Value="documentNew.OwnerId">
                <option value=""></option>
                @foreach (var user in users)
                {
                    <option value="@user.Id">@user.Name</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => documentNew.OwnerId)" />
        </div>
    </AuthorizeView>
    <a type="button" class="btn btn-secondary" href="/document">Отмена</a>
    <button type="submit" class="btn btn-primary">Добавить</button>
</EditForm>

@code {
    [CascadingParameter]
    HttpContext httpContext { get; set; }
    [Inject]
    NavigationManager navigationManager { get; set; }
    [Inject]
    AuthenticationStateProvider authenticationStateProvider { get; set; }

    [Inject]
    public DocumentService documentService { get; set; }
    [Inject]
    public UserService userService { get; set; }

    AuthedUser authedUser = null;
    List<UserOut> users = new();

    public DocumentIn documentNew;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            authedUser = authState.User.Adapt<AuthedUser>();
        } 

        users = userService.getAll();
        documentNew = new DocumentIn() { 
            OwnerId = authedUser.Id
        };
    }

    protected void SaveAddModal()
    {
        try
        {
            var doc = documentService.AddDocument(documentNew);
            if (authedUser.Role == Role.Admin)
                navigationManager.NavigateTo("/document");
            else
                navigationManager.NavigateTo($"user/{authedUser.Id}/document");
        } catch
        {
            
        }
    }
}