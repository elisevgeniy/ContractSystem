@page "/document/{Id:int}"
@rendermode InteractiveServer
@attribute [Authorize]

@if (document != null) {
    <h3>Документ "@document.Index"</h3>

    <table class="table table-striped">
    <thead>
       <tr>
           <th class="col-2">Параметр</th>
           <th>Значение</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>Уникальный номер документа</td>
            <td>@document.Index</td>
        </tr>
        <tr>
            <td>Содержание</td>
            <td>@document.Content</td>
        </tr>
        <tr>
            <td>Статус</td>
            <td>
                @if (document.IsApproved)
                    {
                        @("Согласован")
                        ;
                    }
                    else
                    {
                        @("Не согласован")
                    }
            </td>
        </tr>
        <tr>
            <td>Владелец</td>
            <td>
                <a href="/user/@document.OwnerId">@document.Owner.Name</a>
            </td>
        </tr>
        <tr>
            <td>Согласующие лица</td>
            <td>
                @foreach(var approval in document.Approvals)
                {
                <a href="/user/@approval.UserId">@approval.User.Name</a>
                }
            </td>
        </tr>
    </tbody>
    </table>
    <div class="mt-3">
        <a class="btn btn-secondary" href="/document/@document.Id/update">Изменить</a>
        <button class="btn btn-danger" @onclick="OnDelete">Удалить</button>
    </div>
    <div class="mt-3">
        <a class="btn btn-secondary" href="/document/@document.Id/approval">Согласования</a>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    [Inject]
    DocumentService documentService { get; set; }

    [Inject]
    NavigationManager navigationManager { get; set; }

    [Inject]
    AuthenticationStateProvider authenticationStateProvider { get; set; }

    [CascadingParameter]
    HttpContext httpContext { get; set; }

    private AuthedUser authedUser { get; set; }

    private DocumentOut document;

    protected override async Task OnInitializedAsync()
    {

        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            authedUser = authState.User.Adapt<AuthedUser>();
        }

        try 
        {
            var doc = documentService.GetById(Id);
            if (authedUser.Role != Role.Admin && authedUser.Id != doc.OwnerId) httpContext.Response.Redirect("/403");
            document = doc;
        } catch (NotFoundException e){
            httpContext.Response.Redirect("/404");
        }

    }

    public void OnDelete()
    {
        try
        {
            documentService.Delete(Id);
            navigationManager.NavigateTo("/document");
        } catch (NotFoundException ex)
        {
            navigationManager.NavigateTo("/404");
        } 
    }
}   
