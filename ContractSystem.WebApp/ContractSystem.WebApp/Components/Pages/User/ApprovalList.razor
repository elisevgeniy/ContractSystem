@page "/user/{UserId:int}/approval"
@rendermode InteractiveServer
@attribute [Authorize];

<PageTitle>Согласование документов</PageTitle>

<div class="container m-4">
        <div class="row row-cols-1 row-cols-md-2 
                    row-cols-lg-3 g-4">
        @foreach (var approval in filtredApprovals)
        {
            <DocumentApproveCard 
                Approval="approval"
                Approve="OnApprove"
                />
        } 
    </div>
</div>

@code {
    [Parameter]    
    public int UserId { get; set; }

    [Inject]
    public ApprovalService approvalService { get; set; }

    [Inject]
    NavigationManager navigationManager { get; set; }

    [Inject]
    AuthenticationStateProvider authenticationStateProvider { get; set; }

    [CascadingParameter]
    HttpContext httpContext { get; set; }

    private AuthedUser authedUser { get; set; }

    List<ApprovalOut> filtredApprovals = new();

    protected override async Task OnInitializedAsync()
    {

        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            authedUser = authState.User.Adapt<AuthedUser>();
            if (authedUser.Id != UserId) httpContext.Response.Redirect("/403");
        }

        filtredApprovals = approvalService.GetAllByUser(UserId).OrderBy(a => a.IsApproved).ToList();
        StateHasChanged();
    }

    public void OnApprove(ApproveDocumentModel approveDocument)
    {
        var approved = approvalService.Approve(approveDocument.Id);
        var index = filtredApprovals.FindIndex(a => a.Id == approved.Id);
        filtredApprovals.RemoveAt(index);
        filtredApprovals.Insert(index, approved);
        StateHasChanged();
    }
}