@page "/user/{Id:int}"
@rendermode InteractiveServer
@attribute [Authorize];

@if (user != null)
{
    <h3>Пользователь "@user.Login"</h3>

    <table class="table table-striped">
    <thead>
       <tr>
           <th class="col-2">Параметр</th>
           <th>Значение</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>Логин</td>
            <td>@user.Login</td>
        </tr>
        <tr>
            <td>Имя</td>
            <td>@user.Name</td>
        </tr>
        <tr>
            <td>Роль</td>
            <td>
                @user.Role.ToString();
            </td>
        </tr>
    </tbody>
    </table>
    <div class="mt-3">
        <a class="btn btn-secondary" href="/user/@Id/update">Изменить</a>
        <button class="btn btn-danger" @onclick="OnDelete">Удалить</button>
    </div>
    <div class="mt-3">
        <a class="btn btn-outline-secondary" href="/user/@Id/document">Документы пользователя</a>
        <a class="btn btn-outline-secondary" href="/user/@Id/approval">Документы на согласовании</a>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    [Inject]
    UserService userService { get; set; }

    [Inject]
    NavigationManager navigationManager { get; set; }

    [Inject]
    AuthenticationStateProvider authenticationStateProvider { get; set; }

    [CascadingParameter]
    HttpContext httpContext { get; set; }

    private UserOut user;
    private AuthedUser authedUser;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            authedUser = authState.User.Adapt<AuthedUser>();
        }

        if (authedUser.Role != Role.Admin && authedUser.Id != Id) httpContext.Response.Redirect("/403");

        try
        {          
            user = userService.getById(Id);
        } catch (NotFoundException ex) {
            httpContext.Response.Redirect("/404");
        }
    }

    public void OnDelete()
    {
        try
        {
            userService.Delete(Id);
            navigationManager.NavigateTo("/document");
        } catch (NotFoundException ex)
        {
            navigationManager.NavigateTo("/404");
        } 
    }
}
