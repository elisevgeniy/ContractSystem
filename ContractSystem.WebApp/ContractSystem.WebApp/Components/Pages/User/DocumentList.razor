@page "/user/{UserId:int}/document"
@rendermode InteractiveServer

<PageTitle>Документы</PageTitle>

<InputText @bind-Value="filterText"></InputText>
<button @onclick="OnFilter">Фильтр</button>
<button @onclick="ShowAddModal">Добавить</button>

<div class="row">
    @foreach (var doc in filtredDocuments)
    {
        <DocumentCard Document="doc"></DocumentCard>
    }
</div>

@code {
    [CascadingParameter]
    HttpContext httpContext { get; set; }
    [Inject]
    public DocumentService documentService { get; set; }
    [Inject]
    public UserService userService { get; set; }
    [Parameter]
    public int UserId { get; set; }

    List<DocumentOut> documents = new();
    List<DocumentOut> filtredDocuments = new();
    UserOut user = new();

    string filterText = "";
    bool isModalShowed = false;
    public DocumentIn documentNew;

    protected override void OnInitialized()
    {
        try
        {
            user = userService.getById(UserId);
        } catch (NotFoundException e)
        {
            httpContext.Response.Redirect("/Error");
        }
        documents = documentService.GetAllDocumentsByUser(user.Id);
        OnFilter();
    }

    protected void OnFilter()
    {
        var filterTextLow = filterText.ToLower();
        filtredDocuments = documents
            .Where(d =>
                filterTextLow.Length == 0
                ||
                d.Index.ToLower().Contains(filterTextLow)
                ||
                d.Content.ToLower().Contains(filterTextLow)
            )
            .ToList();

        StateHasChanged();
    }
    protected void ShowAddModal()
    {
        documentNew = new();
        isModalShowed = true;
    }
    protected void HideAddModal()
    {
        isModalShowed = false;
    }
    protected void SaveAddModal()
    {
        HideAddModal();
        var doc = documentService.AddDocument(documentNew);
        documents.Add(doc);

        OnFilter();
    }
}