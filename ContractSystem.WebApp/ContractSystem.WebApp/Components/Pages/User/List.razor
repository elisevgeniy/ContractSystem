@page "/user"
@attribute [Authorize];

<PageTitle>Пользователи</PageTitle>

<a class="btn btn-outline-primary m-2 mb-3" href="/user/create">Добавить</a>

@foreach(var user in users)
{
    <UserCard User="user"></UserCard>

   @*  <div class="card" style="width: 18rem;">
        <div class="card-body">
            <h5 class="card-title">@user.Firstname @user.Lastname</h5>
            <h6 class="card-subtitle mb-2 text-muted">Id: @user.Id</h6>
            <p class="card-text">Всего договоров: @user.Documents.Count<br /> Всего согласований: @user.Approvals.Count</p>
            <a href="#" class="card-link">Согласования</a>
            <a href="#" class="card-link">Договоры</a>
        </div>
    </div> *@
}

@code {
    [Inject]
    public UserService userService { get; set; }

    [Inject]
    AuthenticationStateProvider authenticationStateProvider { get; set; }

    [CascadingParameter]
    HttpContext httpContext { get; set; }

    private AuthedUser authedUser { get; set; }

    List<UserOut> users = new ();

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            authedUser = authState.User.Adapt<AuthedUser>();
        }
        if (authedUser.Role != Role.Admin)
        {
            httpContext.Response.Redirect("/403");
        }

        users= userService.getAll();
    }
}